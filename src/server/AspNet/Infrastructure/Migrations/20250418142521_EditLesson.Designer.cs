// <auto-generated />
using System;
using Infrastructure.data.context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250418142521_EditLesson")]
    partial class EditLesson
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entites.Class", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<DateTime>("createdAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("createdBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("deletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("deletedBy")
                        .HasColumnType("text");

                    b.Property<string>("facultyId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool?>("isDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("lecturerId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("majorId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("updatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("updatedBy")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("facultyId");

                    b.HasIndex("lecturerId")
                        .IsUnique();

                    b.HasIndex("majorId");

                    b.ToTable("Classes");
                });

            modelBuilder.Entity("Domain.Entites.Comment", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("createdAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("createdBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("deletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("deletedBy")
                        .HasColumnType("text");

                    b.Property<string>("imageUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool?>("isDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("likeCount")
                        .HasColumnType("integer");

                    b.Property<string>("postId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("tag")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("updatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("updatedBy")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("createdBy");

                    b.HasIndex("postId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("Domain.Entites.Course", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTime>("createdAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("createdBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("deletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("deletedBy")
                        .HasColumnType("text");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("facultyId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("isActive")
                        .HasColumnType("boolean");

                    b.Property<bool?>("isDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("majorId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("thumbNail")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("updatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("updatedBy")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("createdBy");

                    b.HasIndex("facultyId");

                    b.HasIndex("majorId");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("Domain.Entites.Exam", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("classId")
                        .HasColumnType("text");

                    b.Property<string>("courseId")
                        .HasColumnType("text");

                    b.Property<DateTime>("createdAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("createdBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("deletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("deletedBy")
                        .HasColumnType("text");

                    b.Property<int>("duration")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("endTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("facultyId")
                        .HasColumnType("text");

                    b.Property<bool>("isActive")
                        .HasColumnType("boolean");

                    b.Property<bool?>("isDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("majorId")
                        .HasColumnType("text");

                    b.Property<DateTime?>("startTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("testerId")
                        .HasColumnType("text");

                    b.Property<string>("title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("totalQuestion")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("updatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("updatedBy")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("classId");

                    b.HasIndex("courseId");

                    b.HasIndex("createdBy");

                    b.HasIndex("facultyId");

                    b.HasIndex("majorId");

                    b.HasIndex("testerId");

                    b.ToTable("Exams");
                });

            modelBuilder.Entity("Domain.Entites.ExamQuestion", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("answers")
                        .HasColumnType("text");

                    b.Property<string>("audioUrl")
                        .HasColumnType("text");

                    b.Property<string>("content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("correctAnswer")
                        .HasColumnType("text");

                    b.Property<string>("examId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("imageUrl")
                        .HasColumnType("text");

                    b.Property<bool>("isMultipleChoice")
                        .HasColumnType("boolean");

                    b.Property<string>("videoUrl")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("examId");

                    b.ToTable("ExamQuestions");
                });

            modelBuilder.Entity("Domain.Entites.ExamResultByUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTime>("createdAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("createdBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("deletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("deletedBy")
                        .HasColumnType("text");

                    b.Property<double>("duration")
                        .HasColumnType("double precision");

                    b.Property<string>("examId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool?>("isDeleted")
                        .HasColumnType("boolean");

                    b.Property<double>("score")
                        .HasColumnType("double precision");

                    b.Property<DateTime?>("updatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("updatedBy")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("createdBy");

                    b.HasIndex("examId");

                    b.ToTable("ExamResultsByUser");
                });

            modelBuilder.Entity("Domain.Entites.Faculty", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("createdAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("createdBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("deletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("deletedBy")
                        .HasColumnType("text");

                    b.Property<bool?>("isDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("updatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("updatedBy")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("createdBy");

                    b.ToTable("Faculties");
                });

            modelBuilder.Entity("Domain.Entites.Lecturer", b =>
                {
                    b.Property<string>("cardId")
                        .HasColumnType("text");

                    b.Property<string>("facultyId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("joinedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("majorId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("position")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("userId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("cardId");

                    b.HasIndex("facultyId");

                    b.HasIndex("majorId");

                    b.HasIndex("userId")
                        .IsUnique();

                    b.ToTable("Lecturers", (string)null);
                });

            modelBuilder.Entity("Domain.Entites.Lesson", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("courseId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("position")
                        .HasColumnType("integer");

                    b.Property<string>("thumbnail")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("urlVideo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("courseId");

                    b.ToTable("Lessons");
                });

            modelBuilder.Entity("Domain.Entites.LikePost", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<DateTime>("createdAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("createdBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("deletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("deletedBy")
                        .HasColumnType("text");

                    b.Property<string>("emjoji")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool?>("isDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("postId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("updatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("updatedBy")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("LikePosts");
                });

            modelBuilder.Entity("Domain.Entites.Major", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("createdAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("createdBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("deletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("deletedBy")
                        .HasColumnType("text");

                    b.Property<string>("facultyId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool?>("isDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("updatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("updatedBy")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("createdBy");

                    b.HasIndex("facultyId");

                    b.ToTable("Majors");
                });

            modelBuilder.Entity("Domain.Entites.Notify", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("LecturercardId")
                        .HasColumnType("text");

                    b.Property<string>("StudentcardId")
                        .HasColumnType("text");

                    b.Property<string>("classId")
                        .HasColumnType("text");

                    b.Property<string>("content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("createdAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("createdBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("deletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("deletedBy")
                        .HasColumnType("text");

                    b.Property<string>("facultyId")
                        .HasColumnType("text");

                    b.Property<bool?>("isDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("isForAll")
                        .HasColumnType("boolean");

                    b.Property<bool>("isRead")
                        .HasColumnType("boolean");

                    b.Property<string>("majorId")
                        .HasColumnType("text");

                    b.Property<string>("receiverId")
                        .HasColumnType("text");

                    b.Property<string>("title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("updatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("updatedBy")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("LecturercardId");

                    b.HasIndex("StudentcardId");

                    b.HasIndex("classId");

                    b.HasIndex("createdBy");

                    b.HasIndex("facultyId");

                    b.HasIndex("majorId");

                    b.HasIndex("receiverId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("Domain.Entites.Permisstion", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("assignedUserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("createdAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("createdBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("deletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("deletedBy")
                        .HasColumnType("text");

                    b.Property<bool?>("isDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("isManagedCourses")
                        .HasColumnType("boolean");

                    b.Property<bool>("isManagedPosts")
                        .HasColumnType("boolean");

                    b.Property<bool>("isTeachScheduleAssignment")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("updatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("updatedBy")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("assignedUserId");

                    b.HasIndex("createdBy");

                    b.ToTable("Permisstion");
                });

            modelBuilder.Entity("Domain.Entites.Post", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("createdAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("createdBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("deletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("deletedBy")
                        .HasColumnType("text");

                    b.Property<string>("facultyId")
                        .HasColumnType("text");

                    b.Property<string>("hashtag")
                        .HasColumnType("text");

                    b.Property<string>("imageUrl")
                        .HasColumnType("text");

                    b.Property<bool>("isActive")
                        .HasColumnType("boolean");

                    b.Property<bool?>("isDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("likeCount")
                        .HasColumnType("integer");

                    b.Property<string>("majorId")
                        .HasColumnType("text");

                    b.Property<string>("status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("tag")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("updatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("updatedBy")
                        .HasColumnType("text");

                    b.Property<string>("videoUrl")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("createdBy");

                    b.HasIndex("facultyId");

                    b.HasIndex("majorId");

                    b.ToTable("Posts");
                });

            modelBuilder.Entity("Domain.Entites.ReplyComment", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("commentId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("createdAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("createdBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("deletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("deletedBy")
                        .HasColumnType("text");

                    b.Property<string>("imageUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool?>("isDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("likeCount")
                        .HasColumnType("integer");

                    b.Property<string>("receiverId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("tag")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("updatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("updatedBy")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("commentId");

                    b.HasIndex("createdBy");

                    b.HasIndex("receiverId");

                    b.ToTable("ReplyComments");
                });

            modelBuilder.Entity("Domain.Entites.SavedPosts", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTime>("createdAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("createdBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("deletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("deletedBy")
                        .HasColumnType("text");

                    b.Property<bool?>("isDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("postId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("updatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("updatedBy")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("createdBy");

                    b.HasIndex("postId");

                    b.ToTable("SavedPosts");
                });

            modelBuilder.Entity("Domain.Entites.Student", b =>
                {
                    b.Property<string>("cardId")
                        .HasColumnType("text");

                    b.Property<string>("CourseId")
                        .HasColumnType("text");

                    b.Property<string>("classId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("facultyId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("graduatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("joinedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("majorId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("status")
                        .HasColumnType("text");

                    b.Property<string>("userId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("cardId");

                    b.HasIndex("CourseId");

                    b.HasIndex("classId");

                    b.HasIndex("facultyId");

                    b.HasIndex("majorId");

                    b.HasIndex("userId")
                        .IsUnique();

                    b.ToTable("Students", (string)null);
                });

            modelBuilder.Entity("Domain.Entites.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("avatar")
                        .HasColumnType("text");

                    b.Property<DateTime?>("birth")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("createdAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("createdBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("currentAddress")
                        .HasColumnType("text");

                    b.Property<DateTime?>("deletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("deletedBy")
                        .HasColumnType("text");

                    b.Property<string>("email")
                        .HasColumnType("text");

                    b.Property<string>("fullName")
                        .HasColumnType("text");

                    b.Property<byte?>("gender")
                        .HasColumnType("smallint");

                    b.Property<bool?>("isDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("nickname")
                        .HasColumnType("text");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("phone")
                        .HasColumnType("text");

                    b.Property<string>("role")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("updatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("updatedBy")
                        .HasColumnType("text");

                    b.Property<string>("username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Domain.Entites.Class", b =>
                {
                    b.HasOne("Domain.Entites.User", "User")
                        .WithMany("Classes")
                        .HasForeignKey("UserId");

                    b.HasOne("Domain.Entites.Faculty", "Faculty")
                        .WithMany("Classes")
                        .HasForeignKey("facultyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entites.Lecturer", "Lecturer")
                        .WithOne("Class")
                        .HasForeignKey("Domain.Entites.Class", "lecturerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entites.Major", "Major")
                        .WithMany("Classes")
                        .HasForeignKey("majorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Faculty");

                    b.Navigation("Lecturer");

                    b.Navigation("Major");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entites.Comment", b =>
                {
                    b.HasOne("Domain.Entites.User", "Sender")
                        .WithMany("Comments")
                        .HasForeignKey("createdBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entites.Post", "Post")
                        .WithMany("Comments")
                        .HasForeignKey("postId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Post");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("Domain.Entites.Course", b =>
                {
                    b.HasOne("Domain.Entites.User", "User")
                        .WithMany("Courses")
                        .HasForeignKey("createdBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entites.Faculty", "Faculty")
                        .WithMany("Courses")
                        .HasForeignKey("facultyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entites.Major", "Major")
                        .WithMany("Courses")
                        .HasForeignKey("majorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Faculty");

                    b.Navigation("Major");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entites.Exam", b =>
                {
                    b.HasOne("Domain.Entites.Class", "Class")
                        .WithMany("Exams")
                        .HasForeignKey("classId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Entites.Course", "Course")
                        .WithMany("Exams")
                        .HasForeignKey("courseId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Entites.User", "CreatedUser")
                        .WithMany("CreatedUserExams")
                        .HasForeignKey("createdBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entites.Faculty", "Faculty")
                        .WithMany("Exams")
                        .HasForeignKey("facultyId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Entites.Major", "Major")
                        .WithMany("Exams")
                        .HasForeignKey("majorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Entites.User", "Tester")
                        .WithMany("TesterExams")
                        .HasForeignKey("testerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Class");

                    b.Navigation("Course");

                    b.Navigation("CreatedUser");

                    b.Navigation("Faculty");

                    b.Navigation("Major");

                    b.Navigation("Tester");
                });

            modelBuilder.Entity("Domain.Entites.ExamQuestion", b =>
                {
                    b.HasOne("Domain.Entites.Exam", "Exam")
                        .WithMany("ExamQuestions")
                        .HasForeignKey("examId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Exam");
                });

            modelBuilder.Entity("Domain.Entites.ExamResultByUser", b =>
                {
                    b.HasOne("Domain.Entites.User", "User")
                        .WithMany("ExamResultsByUser")
                        .HasForeignKey("createdBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entites.Exam", "Exam")
                        .WithMany("ExamResults")
                        .HasForeignKey("examId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Exam");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entites.Faculty", b =>
                {
                    b.HasOne("Domain.Entites.User", "User")
                        .WithMany("Faculties")
                        .HasForeignKey("createdBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entites.Lecturer", b =>
                {
                    b.HasOne("Domain.Entites.Faculty", "Faculty")
                        .WithMany("Lecturers")
                        .HasForeignKey("facultyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entites.Major", "Major")
                        .WithMany("Lecturers")
                        .HasForeignKey("majorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entites.User", "User")
                        .WithOne("Lecturer")
                        .HasForeignKey("Domain.Entites.Lecturer", "userId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Faculty");

                    b.Navigation("Major");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entites.Lesson", b =>
                {
                    b.HasOne("Domain.Entites.Course", "Course")
                        .WithMany("Lessons")
                        .HasForeignKey("courseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");
                });

            modelBuilder.Entity("Domain.Entites.LikePost", b =>
                {
                    b.HasOne("Domain.Entites.User", "User")
                        .WithMany("LikePosts")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entites.Major", b =>
                {
                    b.HasOne("Domain.Entites.User", "User")
                        .WithMany("Majors")
                        .HasForeignKey("createdBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entites.Faculty", "Faculty")
                        .WithMany("Majors")
                        .HasForeignKey("facultyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Faculty");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entites.Notify", b =>
                {
                    b.HasOne("Domain.Entites.Lecturer", null)
                        .WithMany("Notifies")
                        .HasForeignKey("LecturercardId");

                    b.HasOne("Domain.Entites.Student", null)
                        .WithMany("Notifies")
                        .HasForeignKey("StudentcardId");

                    b.HasOne("Domain.Entites.Class", "Class")
                        .WithMany("Notifies")
                        .HasForeignKey("classId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Entites.User", "Sender")
                        .WithMany("CreatedNotifies")
                        .HasForeignKey("createdBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Entites.Faculty", "Faculty")
                        .WithMany("Notifies")
                        .HasForeignKey("facultyId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Entites.Major", "Major")
                        .WithMany("Notifies")
                        .HasForeignKey("majorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Entites.User", "Receiver")
                        .WithMany("ReceivedNotifies")
                        .HasForeignKey("receiverId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Class");

                    b.Navigation("Faculty");

                    b.Navigation("Major");

                    b.Navigation("Receiver");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("Domain.Entites.Permisstion", b =>
                {
                    b.HasOne("Domain.Entites.User", "assignedUser")
                        .WithMany("AssignedPermisstionsUser")
                        .HasForeignKey("assignedUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entites.User", "createdUser")
                        .WithMany("CreatedPermisstionsUser")
                        .HasForeignKey("createdBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("assignedUser");

                    b.Navigation("createdUser");
                });

            modelBuilder.Entity("Domain.Entites.Post", b =>
                {
                    b.HasOne("Domain.Entites.User", "Author")
                        .WithMany("Posts")
                        .HasForeignKey("createdBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entites.Faculty", "Faculty")
                        .WithMany("Posts")
                        .HasForeignKey("facultyId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Entites.Major", "Major")
                        .WithMany("Posts")
                        .HasForeignKey("majorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Author");

                    b.Navigation("Faculty");

                    b.Navigation("Major");
                });

            modelBuilder.Entity("Domain.Entites.ReplyComment", b =>
                {
                    b.HasOne("Domain.Entites.Comment", "Comment")
                        .WithMany("ReplyComments")
                        .HasForeignKey("commentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entites.User", "Sender")
                        .WithMany("ReplyCommentsSender")
                        .HasForeignKey("createdBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entites.User", "Receiver")
                        .WithMany("ReplyCommentsReceiver")
                        .HasForeignKey("receiverId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Comment");

                    b.Navigation("Receiver");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("Domain.Entites.SavedPosts", b =>
                {
                    b.HasOne("Domain.Entites.User", "User")
                        .WithMany("SavedPosts")
                        .HasForeignKey("createdBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entites.Post", "Post")
                        .WithMany("SavedPosts")
                        .HasForeignKey("postId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Post");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entites.Student", b =>
                {
                    b.HasOne("Domain.Entites.Course", null)
                        .WithMany("Students")
                        .HasForeignKey("CourseId");

                    b.HasOne("Domain.Entites.Class", "Class")
                        .WithMany("Students")
                        .HasForeignKey("classId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entites.Faculty", "Faculty")
                        .WithMany("Students")
                        .HasForeignKey("facultyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entites.Major", "Major")
                        .WithMany("Students")
                        .HasForeignKey("majorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entites.User", "User")
                        .WithOne("Student")
                        .HasForeignKey("Domain.Entites.Student", "userId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Class");

                    b.Navigation("Faculty");

                    b.Navigation("Major");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entites.Class", b =>
                {
                    b.Navigation("Exams");

                    b.Navigation("Notifies");

                    b.Navigation("Students");
                });

            modelBuilder.Entity("Domain.Entites.Comment", b =>
                {
                    b.Navigation("ReplyComments");
                });

            modelBuilder.Entity("Domain.Entites.Course", b =>
                {
                    b.Navigation("Exams");

                    b.Navigation("Lessons");

                    b.Navigation("Students");
                });

            modelBuilder.Entity("Domain.Entites.Exam", b =>
                {
                    b.Navigation("ExamQuestions");

                    b.Navigation("ExamResults");
                });

            modelBuilder.Entity("Domain.Entites.Faculty", b =>
                {
                    b.Navigation("Classes");

                    b.Navigation("Courses");

                    b.Navigation("Exams");

                    b.Navigation("Lecturers");

                    b.Navigation("Majors");

                    b.Navigation("Notifies");

                    b.Navigation("Posts");

                    b.Navigation("Students");
                });

            modelBuilder.Entity("Domain.Entites.Lecturer", b =>
                {
                    b.Navigation("Class")
                        .IsRequired();

                    b.Navigation("Notifies");
                });

            modelBuilder.Entity("Domain.Entites.Major", b =>
                {
                    b.Navigation("Classes");

                    b.Navigation("Courses");

                    b.Navigation("Exams");

                    b.Navigation("Lecturers");

                    b.Navigation("Notifies");

                    b.Navigation("Posts");

                    b.Navigation("Students");
                });

            modelBuilder.Entity("Domain.Entites.Post", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("SavedPosts");
                });

            modelBuilder.Entity("Domain.Entites.Student", b =>
                {
                    b.Navigation("Notifies");
                });

            modelBuilder.Entity("Domain.Entites.User", b =>
                {
                    b.Navigation("AssignedPermisstionsUser");

                    b.Navigation("Classes");

                    b.Navigation("Comments");

                    b.Navigation("Courses");

                    b.Navigation("CreatedNotifies");

                    b.Navigation("CreatedPermisstionsUser");

                    b.Navigation("CreatedUserExams");

                    b.Navigation("ExamResultsByUser");

                    b.Navigation("Faculties");

                    b.Navigation("Lecturer")
                        .IsRequired();

                    b.Navigation("LikePosts");

                    b.Navigation("Majors");

                    b.Navigation("Posts");

                    b.Navigation("ReceivedNotifies");

                    b.Navigation("ReplyCommentsReceiver");

                    b.Navigation("ReplyCommentsSender");

                    b.Navigation("SavedPosts");

                    b.Navigation("Student")
                        .IsRequired();

                    b.Navigation("TesterExams");
                });
#pragma warning restore 612, 618
        }
    }
}
