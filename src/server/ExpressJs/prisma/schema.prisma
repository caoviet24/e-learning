generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String          @id
  username           String
  password           String
  full_name          String
  gender             Int
  avatar             String?
  original_address   String?
  current_address    String?
  email              String?         @unique
  phone_number       String?
  role               Role            @default(STUDENT)
  created_at         DateTime        @default(now())
  created_by         String?
  updated_at         DateTime?       @updatedAt
  updated_by         String?
  is_deleted         Boolean?
  deleted_by         String?
  deleted_at         DateTime?
  assignments        Assignment[]
  classesManaged     Class[]         @relation("classes_managed")
  coursesCreated     Course[]        @relation("courses_created")
  courses_deleted    Course[]        @relation("course_deleted")
  courses_updated    Course[]        @relation("course_updated")
  examAttempts       ExamAttempt[]
  examinations       Examination[]
  faculties_created  Faculty[]       @relation("faculty_created")
  faculties_deleted  Faculty[]       @relation("faculty_deleted")
  faculties_updated  Faculty[]       @relation("faculty_updated")
  feedbacks_given    Feedback[]      @relation("feedback_lecturer")
  feedbacks_received Feedback[]      @relation("feedback_student")
  lecturerProfile    Lecturer?
  majors_created     Major[]         @relation("major_created")
  majors_deleted     Major[]         @relation("major_deleted")
  majors_updated     Major[]         @relation("major_updated")
  news_created       News[]          @relation("news_created")
  news_deleted       News[]          @relation("news_deleted")
  news_updated       News[]          @relation("news_updated")
  notifications_sent Notification[]  @relation("notifications_sent")
  notifications      Notification[]  @relation("notifications_received")
  studentClasses     StudentClass[]
  studentCourses     StudentCourse[]
  studentProfile     Student?
  submissions        Submission[]

  @@map("users")
}

model Student {
  id         String  @id
  student_id String  @unique
  user_id    String  @unique
  faculty_id String
  major_id   String
  class_id   String
  class      Class   @relation(fields: [class_id], references: [id])
  faculty    Faculty @relation(fields: [faculty_id], references: [id])
  major      Major   @relation(fields: [major_id], references: [id])
  user       User    @relation(fields: [user_id], references: [id])

  @@map("students")
}

model Lecturer {
  id          String          @id
  lecturer_id String          @unique
  user_id     String          @unique
  faculty_id  String
  major_id    String
  classes     LecturerClass[]
  faculty     Faculty         @relation(fields: [faculty_id], references: [id])
  major       Major           @relation(fields: [major_id], references: [id])
  user        User            @relation(fields: [user_id], references: [id])

  @@map("lecturers")
}

model Faculty {
  id            String         @id
  name          String
  code          String         @unique
  created_at    DateTime       @default(now())
  created_by    String
  updated_at    DateTime?      @updatedAt
  updated_by    String?
  is_deleted    Boolean?
  deleted_by    String?
  deleted_at    DateTime?
  classes       Class[]
  courses       Course[]
  createdUser   User           @relation("faculty_created", fields: [created_by], references: [id])
  deletedUser   User?          @relation("faculty_deleted", fields: [deleted_by], references: [id])
  updatedUser   User?          @relation("faculty_updated", fields: [updated_by], references: [id])
  lecturers     Lecturer[]
  majors        Major[]
  notifications Notification[] @relation("faculty_notifications")
  students      Student[]

  @@map("faculties")
}

model Major {
  id            String         @id
  name          String
  code          String
  faculty_id    String
  created_at    DateTime       @default(now())
  created_by    String
  updated_at    DateTime?      @updatedAt
  updated_by    String?
  is_deleted    Boolean?
  deleted_by    String?
  deleted_at    DateTime?
  classes       Class[]
  courses       Course[]
  lecturers     Lecturer[]
  createdUser   User           @relation("major_created", fields: [created_by], references: [id])
  deletedUser   User?          @relation("major_deleted", fields: [deleted_by], references: [id])
  faculty       Faculty        @relation(fields: [faculty_id], references: [id])
  updatedUser   User?          @relation("major_updated", fields: [updated_by], references: [id])
  notifications Notification[] @relation("major_notifications")
  students      Student[]

  @@map("majors")
}

model Class {
  id              String          @id
  name            String
  code            String          @unique
  faculty_id      String
  major_id        String
  lecturer_id     String
  assignments     Assignment[]
  faculty         Faculty         @relation(fields: [faculty_id], references: [id])
  lecturer        User            @relation("classes_managed", fields: [lecturer_id], references: [id])
  major           Major           @relation(fields: [major_id], references: [id])
  examinations    Examination[]
  lecturerClasses LecturerClass[]
  notifications   Notification[]  @relation("class_notifications")
  students        StudentClass[]
  studentProfiles Student[]

  @@map("classes")
}

model LecturerClass {
  lecturer_id String
  class_id    String
  started_at  DateTime  @default(now())
  ended_at    DateTime?
  class       Class     @relation(fields: [class_id], references: [id])
  lecturer    Lecturer  @relation(fields: [lecturer_id], references: [id])

  @@id([lecturer_id, class_id])
  @@map("lecturer_classes")
}

model StudentClass {
  student_id String
  class_id   String
  joined_at  DateTime @default(now())
  class      Class    @relation(fields: [class_id], references: [id])
  student    User     @relation(fields: [student_id], references: [id])

  @@id([student_id, class_id])
  @@map("student_classes")
}

model Course {
  id          String          @id
  title       String
  description String
  thumbnail   String?
  status      CourseStatus    @default(PRIVATE)
  active      Boolean         @default(false)
  faculty_id  String
  major_id    String
  created_at  DateTime        @default(now())
  created_by  String
  updated_at  DateTime?       @updatedAt
  updated_by  String?
  is_deleted  Boolean?
  deleted_by  String?
  deleted_at  DateTime?
 
  createdUser User            @relation("courses_created", fields: [created_by], references: [id])
  deletedUser User?           @relation("course_deleted", fields: [deleted_by], references: [id])
  updatedUser User?           @relation("course_updated", fields: [updated_by], references: [id])
    
  faculty     Faculty         @relation(fields: [faculty_id], references: [id])
  major       Major           @relation(fields: [major_id], references: [id])

  lessons     Lesson[]
  students    StudentCourse[]

  @@map("courses")
}

model StudentCourse {
  student_id String
  course_id  String
  progress   Float    @default(0)
  joined_at  DateTime @default(now())
  course     Course   @relation(fields: [course_id], references: [id])
  student    User     @relation(fields: [student_id], references: [id])

  @@id([student_id, course_id])
  @@map("student_courses")
}

model Lesson {
  id        String     @id
  title     String
  content   String
  video_url String?
  course_id String
  order     Int
  documents Document[]
  course    Course     @relation(fields: [course_id], references: [id])

  @@map("lessons")
}

model Document {
  id        String @id
  title     String
  fileUrl   String
  lesson_id String
  lesson    Lesson @relation(fields: [lesson_id], references: [id])

  @@map("documents")
}

model Assignment {
  id          String       @id
  title       String
  description String
  due_date    DateTime
  class_id    String
  lecturer_id String
  class       Class        @relation(fields: [class_id], references: [id])
  lecturer    User         @relation(fields: [lecturer_id], references: [id])
  submissions Submission[]

  @@map("assignments")
}

model Submission {
  id            String     @id
  content       String
  file_url      String?
  grade         Float?
  feedback      String?
  submitted_at  DateTime   @default(now())
  assignment_id String
  student_id    String
  assignment    Assignment @relation(fields: [assignment_id], references: [id])
  student       User       @relation(fields: [student_id], references: [id])

  @@map("submissions")
}

model Examination {
  id          String        @id
  title       String
  description String
  start_time  DateTime
  duration    Int
  class_id    String
  lecturer_id String
  attempts    ExamAttempt[]
  class       Class         @relation(fields: [class_id], references: [id])
  lecturer    User          @relation(fields: [lecturer_id], references: [id])
  questions   Question[]

  @@map("examinations")
}

model Question {
  id             String       @id
  content        String
  type           QuestionType
  options        Json?
  answer         String
  points         Float
  examination_id String
  examination    Examination  @relation(fields: [examination_id], references: [id])

  @@map("questions")
}

model ExamAttempt {
  id             String      @id
  answers        Json
  score          Float?
  feedback       String?
  started_at     DateTime    @default(now())
  submitted_at   DateTime?
  examination_id String
  student_id     String
  examination    Examination @relation(fields: [examination_id], references: [id])
  student        User        @relation(fields: [student_id], references: [id])

  @@map("exam_attempts")
}

model Feedback {
  id          String    @id
  content     String
  lecturer_id String
  student_id  String
  created_at  DateTime  @default(now())
  is_deleted  Boolean   @default(false)
  deleted_at  DateTime?
  lecturer    User      @relation("feedback_lecturer", fields: [lecturer_id], references: [id])
  student     User      @relation("feedback_student", fields: [student_id], references: [id])

  @@map("feedbacks")
}

model Notification {
  id         String    @id
  title      String
  content    String
  is_read    Boolean   @default(false)
  user_id    String?
  faculty_id String?
  major_id   String?
  class_id   String?
  sender_id  String
  created_at DateTime  @default(now())
  is_deleted Boolean   @default(false)
  deleted_at DateTime?
  is_for_all Boolean   @default(false)
  class      Class?    @relation("class_notifications", fields: [class_id], references: [id])
  faculty    Faculty?  @relation("faculty_notifications", fields: [faculty_id], references: [id])
  major      Major?    @relation("major_notifications", fields: [major_id], references: [id])
  sender     User      @relation("notifications_sent", fields: [sender_id], references: [id])
  user       User?     @relation("notifications_received", fields: [user_id], references: [id])

  @@map("notifications")
}

model News {
  id          String    @id
  title       String
  content     String
  thumbnail   String?
  is_approved Boolean   @default(false)
  created_at  DateTime  @default(now())
  created_by  String
  updated_at  DateTime? @updatedAt
  updated_by  String?
  is_deleted  Boolean?
  deleted_by  String?
  deleted_at  DateTime?
  createdUser User      @relation("news_created", fields: [created_by], references: [id])
  deletedUser User?     @relation("news_deleted", fields: [deleted_by], references: [id])
  updatedUser User?     @relation("news_updated", fields: [updated_by], references: [id])

  @@map("news")
}

enum Role {
  ADMIN
  LECTURER
  STUDENT
  UNDEFINED
}

enum CourseStatus {
  PRIVATE
  PUBLIC
}

enum QuestionType {
  MULTIPLE_CHOICE
  ESSAY
}
